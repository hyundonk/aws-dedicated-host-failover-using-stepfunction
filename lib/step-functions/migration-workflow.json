{
  "Comment": "EC2 Dedicated Host Migration Workflow with Enhanced Instance Tracking",
  "StartAt": "InitializeMigration",
  "States": {
    "InitializeMigration": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${InitializeMigrationFunction}",
        "Payload": {
          "hostId.$": "$.hostId"
        }
      },
      "ResultPath": "$.initResult",
      "Next": "SendMigrationStartedNotification"
    },
    "SendMigrationStartedNotification": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${SendStepNotificationFunction}",
        "Payload": {
          "hostId.$": "$.hostId",
          "step": "migration_started"
        }
      },
      "ResultPath": "$.notificationResult",
      "Next": "CheckReservedHostAvailability",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "ResultPath": "$.notificationError",
          "Next": "CheckReservedHostAvailability"
        }
      ]
    },
    "CheckReservedHostAvailability": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${CheckReservedHostFunction}",
        "Payload": {
          "hostId.$": "$.hostId"
        }
      },
      "ResultPath": "$.reservedHostResult",
      "Next": "IsReservedHostAvailable"
    },
    "IsReservedHostAvailable": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.reservedHostResult.Payload.isAvailable",
          "BooleanEquals": true,
          "Next": "GetInstancesOnFailingHost"
        }
      ],
      "Default": "ProvisionReservedHost"
    },
    "ProvisionReservedHost": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${ProvisionReservedHostFunction}",
        "Payload": {
          "hostId.$": "$.hostId",
          "availabilityZone": "${AvailabilityZone}",
          "instanceType": "${InstanceType}"
        }
      },
      "ResultPath": "$.provisionResult",
      "Next": "SendProvisionNotification",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "ResultPath": "$.error",
          "Next": "HandleProvisionFailure"
        }
      ]
    },
    "HandleProvisionFailure": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${UpdateStatusFunction}",
        "Payload": {
          "hostId.$": "$.hostId",
          "status": "failed",
          "error.$": "$.error"
        }
      },
      "ResultPath": "$.updateResult",
      "Next": "PrepareProvisionFailureMessage"
    },
    "PrepareProvisionFailureMessage": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${PrepareDetailedNotificationFunction}",
        "Payload": {
          "hostId.$": "$.hostId",
          "notificationType": "failure",
          "errorMessage": "Failed to provision a reserved host for failover. Please check the logs for more details."
        }
      },
      "ResultPath": "$.notificationResult",
      "Next": "SendFailureNotification"
    },
    "SendProvisionNotification": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "TopicArn": "${AlertTopicArn}",
        "Subject": "EC2 Dedicated Host Failover - New Host Provisioned",
        "Message.$": "States.Format('Provisioned new reserved host {} for failover of {}', $.provisionResult.Payload.reservedHostId, $.hostId)"
      },
      "Next": "GetInstancesOnFailingHost"
    },
    "GetInstancesOnFailingHost": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${GetInstancesFunction}",
        "Payload": {
          "hostId.$": "$.hostId",
          "reservedHostId.$": "$.reservedHostResult.Payload.reservedHostId"
        }
      },
      "ResultPath": "$.instances",
      "Next": "CheckInstancesExist"
    },
    "CheckInstancesExist": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.instances.Payload.hasInstances",
          "BooleanEquals": true,
          "Next": "SendInstancesFoundNotification"
        }
      ],
      "Default": "NoInstancesToMigrate"
    },
    "SendInstancesFoundNotification": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${SendStepNotificationFunction}",
        "Payload": {
          "hostId.$": "$.hostId",
          "step": "instances_found",
          "reservedHostId.$": "$.instances.Payload.reservedHostId"
        }
      },
      "ResultPath": "$.notificationResult",
      "Next": "PrepareInstanceMigration",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "ResultPath": "$.notificationError",
          "Next": "PrepareInstanceMigration"
        }
      ]
    },
    "NoInstancesToMigrate": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${UpdateStatusFunction}",
        "Payload": {
          "hostId.$": "$.hostId",
          "status": "complete"
        }
      },
      "ResultPath": "$.updateResult",
      "Next": "SendNoInstancesNotification"
    },
    "SendNoInstancesNotification": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${PrepareDetailedNotificationFunction}",
        "Payload": {
          "hostId.$": "$.hostId",
          "notificationType": "success",
          "customMessage.$": "States.Format('No instances found on dedicated host {}. Migration completed successfully with no instances to migrate.', $.hostId)"
        }
      },
      "ResultPath": "$.notificationResult",
      "Next": "SendNoInstancesNotificationSNS"
    },
    "SendNoInstancesNotificationSNS": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "TopicArn": "${AlertTopicArn}",
        "Subject": "EC2 Dedicated Host Failover - No Instances to Migrate",
        "Message.$": "$.notificationResult.Payload.message"
      },
      "Next": "MigrationComplete"
    },
    "PrepareInstanceMigration": {
      "Type": "Pass",
      "Parameters": {
        "index": 0,
        "totalInstances.$": "States.ArrayLength($.instances.Payload.instanceIds)",
        "failedInstances": [],
        "reservedHostId.$": "$.instances.Payload.reservedHostId",
        "hostId.$": "$.hostId"
      },
      "ResultPath": "$.migrationState",
      "Next": "InstanceMigrationIterator"
    },
    "InstanceMigrationIterator": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.migrationState.index",
          "NumericLessThan": 100,
          "Next": "CheckIndexAgainstTotal"
        }
      ],
      "Default": "EvaluateMigrationResults"
    },
    "CheckIndexAgainstTotal": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.migrationState.index",
          "NumericLessThanPath": "$.migrationState.totalInstances",
          "Next": "ExtractCurrentInstanceId"
        }
      ],
      "Default": "EvaluateMigrationResults"
    },
    "ExtractCurrentInstanceId": {
      "Type": "Pass",
      "Parameters": {
        "instanceId.$": "States.ArrayGetItem($.instances.Payload.instanceIds, $.migrationState.index)",
        "forceStop": false
      },
      "ResultPath": "$.currentInstance",
      "Next": "UpdateInstanceStatusToInProgress"
    },
    "UpdateInstanceStatusToInProgress": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${UpdateInstanceMigrationStatusFunction}",
        "Payload": {
          "hostId.$": "$.migrationState.hostId",
          "instanceId.$": "$.currentInstance.instanceId",
          "status": "in-progress"
        }
      },
      "ResultPath": "$.instanceStatusUpdate",
      "Next": "SendInstanceStoppingNotification"
    },
    "SendInstanceStoppingNotification": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${SendStepNotificationFunction}",
        "Payload": {
          "hostId.$": "$.migrationState.hostId",
          "instanceId.$": "$.currentInstance.instanceId",
          "reservedHostId.$": "$.migrationState.reservedHostId",
          "step": "instance_stopping",
          "additionalInfo": {
            "forceStop.$": "$.currentInstance.forceStop"
          }
        }
      },
      "ResultPath": "$.notificationResult",
      "Next": "StopInstance",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "ResultPath": "$.notificationError",
          "Next": "StopInstance"
        }
      ]
    },
    "StopInstance": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${StopInstanceFunction}",
        "Payload": {
          "instanceId.$": "$.currentInstance.instanceId",
          "reservedHostId.$": "$.migrationState.reservedHostId",
          "force.$": "$.currentInstance.forceStop"
        }
      },
      "ResultPath": "$.stopResult",
      "Next": "InitializeStopCounter",
      "Retry": [
        {
          "ErrorEquals": ["InstanceStopError"],
          "IntervalSeconds": 30,
          "MaxAttempts": 3,
          "BackoffRate": 1.5
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "ResultPath": "$.error",
          "Next": "HandleInstanceMigrationFailure"
        }
      ]
    },
    "InitializeStopCounter": {
      "Type": "Pass",
      "Parameters": {
        "counter": 0,
        "forceStopApplied": false
      },
      "ResultPath": "$.stopCheckCounter",
      "Next": "WaitForInstanceToStop"
    },
    "WaitForInstanceToStop": {
      "Type": "Wait",
      "Seconds": 30,
      "Next": "CheckInstanceStopped"
    },
    "CheckInstanceStopped": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${CheckInstanceStateFunction}",
        "Payload": {
          "instanceId.$": "$.currentInstance.instanceId",
          "expectedState": "stopped",
          "reservedHostId.$": "$.migrationState.reservedHostId"
        }
      },
      "ResultPath": "$.instanceState",
      "Next": "IsInstanceStopped"
    },
    "IsInstanceStopped": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.instanceState.Payload.inExpectedState",
          "BooleanEquals": true,
          "Next": "SendInstanceStoppedNotification"
        }
      ],
      "Default": "IncrementStopCounter"
    },
    "SendInstanceStoppedNotification": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${SendStepNotificationFunction}",
        "Payload": {
          "hostId.$": "$.migrationState.hostId",
          "instanceId.$": "$.currentInstance.instanceId",
          "reservedHostId.$": "$.migrationState.reservedHostId",
          "step": "instance_stopped",
          "additionalInfo": {
            "forceStopUsed.$": "$.stopCheckCounter.forceStopApplied"
          }
        }
      },
      "ResultPath": "$.notificationResult",
      "Next": "ModifyInstancePlacement",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "ResultPath": "$.notificationError",
          "Next": "ModifyInstancePlacement"
        }
      ]
    },
    "IncrementStopCounter": {
      "Type": "Pass",
      "Parameters": {
        "stopCheckCounter": {
          "counter.$": "States.MathAdd($.stopCheckCounter.counter, 1)",
          "forceStopApplied.$": "$.stopCheckCounter.forceStopApplied"
        },
        "hostId.$": "$.hostId",
        "currentInstance.$": "$.currentInstance",
        "instanceState.$": "$.instanceState",
        "migrationState.$": "$.migrationState",
        "instances.$": "$.instances",
        "initResult.$": "$.initResult",
        "reservedHostResult.$": "$.reservedHostResult"
      },
      "ResultPath": "$",
      "Next": "CheckStopRetryCount"
    },
    "CheckStopRetryCount": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.stopCheckCounter.forceStopApplied",
          "BooleanEquals": true,
          "Next": "CheckForceStopRetryLimit"
        },
        {
          "Variable": "$.stopCheckCounter.counter",
          "NumericEquals": 2,
          "Next": "PrepareForceStop"
        }
      ],
      "Default": "WaitForInstanceToStop"
    },
    "CheckForceStopRetryLimit": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.stopCheckCounter.counter",
          "NumericEquals": 6,
          "Next": "HandleInstanceMigrationFailure"
        }
      ],
      "Default": "WaitForInstanceToStop"
    },
    "PrepareForceStop": {
      "Type": "Pass",
      "Parameters": {
        "instanceId.$": "$.currentInstance.instanceId",
        "forceStop": true
      },
      "ResultPath": "$.currentInstance",
      "Next": "UpdateForceStopFlag"
    },
    "UpdateForceStopFlag": {
      "Type": "Pass",
      "Parameters": {
        "counter": 2,
        "forceStopApplied": true
      },
      "ResultPath": "$.stopCheckCounter",
      "Next": "StopInstance"
    },
    "ModifyInstancePlacement": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${ModifyPlacementFunction}",
        "Payload": {
          "instanceId.$": "$.currentInstance.instanceId",
          "reservedHostId.$": "$.migrationState.reservedHostId"
        }
      },
      "ResultPath": "$.placementResult",
      "Next": "SendPlacementModifiedNotification",
      "Retry": [
        {
          "ErrorEquals": ["PlacementError"],
          "IntervalSeconds": 10,
          "MaxAttempts": 3,
          "BackoffRate": 1.5
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "ResultPath": "$.error",
          "Next": "HandleInstanceMigrationFailure"
        }
      ]
    },
    "SendPlacementModifiedNotification": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${SendStepNotificationFunction}",
        "Payload": {
          "hostId.$": "$.migrationState.hostId",
          "instanceId.$": "$.currentInstance.instanceId",
          "reservedHostId.$": "$.migrationState.reservedHostId",
          "step": "placement_modified"
        }
      },
      "ResultPath": "$.notificationResult",
      "Next": "SendInstanceStartingNotification",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "ResultPath": "$.notificationError",
          "Next": "SendInstanceStartingNotification"
        }
      ]
    },
    "SendInstanceStartingNotification": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${SendStepNotificationFunction}",
        "Payload": {
          "hostId.$": "$.migrationState.hostId",
          "instanceId.$": "$.currentInstance.instanceId",
          "reservedHostId.$": "$.migrationState.reservedHostId",
          "step": "instance_starting"
        }
      },
      "ResultPath": "$.notificationResult",
      "Next": "StartInstance",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "ResultPath": "$.notificationError",
          "Next": "StartInstance"
        }
      ]
    },
    "StartInstance": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${StartInstanceFunction}",
        "Payload": {
          "instanceId.$": "$.currentInstance.instanceId",
          "reservedHostId.$": "$.migrationState.reservedHostId"
        }
      },
      "ResultPath": "$.startResult",
      "Next": "WaitForInstanceToStart",
      "Retry": [
        {
          "ErrorEquals": ["InstanceStartError"],
          "IntervalSeconds": 30,
          "MaxAttempts": 3,
          "BackoffRate": 1.5
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "ResultPath": "$.error",
          "Next": "HandleInstanceMigrationFailure"
        }
      ]
    },
    "WaitForInstanceToStart": {
      "Type": "Wait",
      "Seconds": 30,
      "Next": "CheckInstanceStarted"
    },
    "CheckInstanceStarted": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${CheckInstanceStateFunction}",
        "Payload": {
          "instanceId.$": "$.currentInstance.instanceId",
          "expectedState": "running",
          "reservedHostId.$": "$.migrationState.reservedHostId"
        }
      },
      "ResultPath": "$.instanceState",
      "Next": "IsInstanceStarted"
    },
    "IsInstanceStarted": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.instanceState.Payload.inExpectedState",
          "BooleanEquals": true,
          "Next": "SendInstanceStartedNotification"
        }
      ],
      "Default": "WaitForInstanceToStart"
    },
    "SendInstanceStartedNotification": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${SendStepNotificationFunction}",
        "Payload": {
          "hostId.$": "$.migrationState.hostId",
          "instanceId.$": "$.currentInstance.instanceId",
          "reservedHostId.$": "$.migrationState.reservedHostId",
          "step": "instance_started"
        }
      },
      "ResultPath": "$.notificationResult",
      "Next": "UpdateInstanceStatusToSuccess",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "ResultPath": "$.notificationError",
          "Next": "UpdateInstanceStatusToSuccess"
        }
      ]
    },
    "UpdateInstanceStatusToSuccess": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${UpdateInstanceMigrationStatusFunction}",
        "Payload": {
          "hostId.$": "$.migrationState.hostId",
          "instanceId.$": "$.currentInstance.instanceId",
          "status": "success"
        }
      },
      "ResultPath": "$.instanceStatusUpdate",
      "Next": "IncrementInstanceCounter"
    },
    "HandleInstanceMigrationFailure": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${UpdateInstanceMigrationStatusFunction}",
        "Payload": {
          "hostId.$": "$.migrationState.hostId",
          "instanceId.$": "$.currentInstance.instanceId",
          "status": "failed",
          "errorMessage.$": "States.JsonToString($.error)"
        }
      },
      "ResultPath": "$.instanceStatusUpdate",
      "Next": "UpdateFailedInstancesList"
    },
    "UpdateFailedInstancesList": {
      "Type": "Pass",
      "Parameters": {
        "index.$": "$.migrationState.index",
        "totalInstances.$": "$.migrationState.totalInstances",
        "failedInstances.$": "States.Array($.migrationState.failedInstances, $.currentInstance.instanceId)",
        "reservedHostId.$": "$.migrationState.reservedHostId",
        "hostId.$": "$.migrationState.hostId",
        "failed": true
      },
      "ResultPath": "$.migrationState",
      "Next": "IncrementInstanceCounter"
    },
    "IncrementInstanceCounter": {
      "Type": "Pass",
      "Parameters": {
        "index.$": "States.MathAdd($.migrationState.index, 1)",
        "totalInstances.$": "$.migrationState.totalInstances",
        "failedInstances.$": "$.migrationState.failedInstances",
        "reservedHostId.$": "$.migrationState.reservedHostId",
        "hostId.$": "$.migrationState.hostId",
        "failed": false
      },
      "ResultPath": "$.migrationState",
      "Next": "InstanceMigrationIterator"
    },
    "EvaluateMigrationResults": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.migrationState.failed",
          "BooleanEquals": true,
          "Next": "MigrationPartiallyFailed"
        }
      ],
      "Default": "MigrationSuccessful"
    },
    "MigrationSuccessful": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${UpdateStatusFunction}",
        "Payload": {
          "hostId.$": "$.hostId",
          "status": "complete",
          "expirationTime": true
        }
      },
      "ResultPath": "$.updateResult",
      "Next": "RemoveReservedTag"
    },
    "RemoveReservedTag": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${RemoveReservedTagFunction}",
        "Payload": {
          "reservedHostId.$": "$.migrationState.reservedHostId"
        }
      },
      "ResultPath": "$.tagRemovalResult",
      "Next": "PrepareSuccessMessage"
    },
    "PrepareSuccessMessage": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${PrepareDetailedNotificationFunction}",
        "Payload": {
          "hostId.$": "$.hostId",
          "notificationType": "success"
        }
      },
      "ResultPath": "$.notificationResult",
      "Next": "SendSuccessNotification"
    },
    "SendSuccessNotification": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "TopicArn": "${AlertTopicArn}",
        "Subject.$": "$.notificationResult.Payload.subject",
        "Message.$": "$.notificationResult.Payload.message"
      },
      "Next": "MigrationComplete"
    },
    "MigrationPartiallyFailed": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${UpdateStatusFunction}",
        "Payload": {
          "hostId.$": "$.hostId",
          "status": "failed"
        }
      },
      "ResultPath": "$.updateResult",
      "Next": "PrepareFailureMessage"
    },
    "PrepareFailureMessage": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${PrepareDetailedNotificationFunction}",
        "Payload": {
          "hostId.$": "$.hostId",
          "notificationType": "partial",
          "failedInstances.$": "$.migrationState.failedInstances"
        }
      },
      "ResultPath": "$.notificationResult",
      "Next": "SendFailureNotification"
    },
    "SendFailureNotification": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "TopicArn": "${AlertTopicArn}",
        "Subject.$": "$.notificationResult.Payload.subject",
        "Message.$": "$.notificationResult.Payload.message"
      },
      "Next": "MigrationComplete"
    },
    "MigrationComplete": {
      "Type": "Succeed"
    }
  }
}
